name: Deploy Swagger Flask App on EC2

on:
  push:
    branches:
      - main  # You can adjust this to your desired branch

jobs:
  deploy:
    runs-on: ubuntu-latest  # Change this to an appropriate runner for your environment (e.g., 'self-hosted' if you're using a custom runner)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Install dependencies (e.g., Python, pip, etc.)
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'  # Specify the version of Python you're using

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Ensure Gunicorn is installed (in case it's missing)
      - name: Install Gunicorn
        run: pip install gunicorn

      # Start Gunicorn to serve the app (ensure your app is correctly specified here)
      - name: Start Gunicorn
        run: |
          gunicorn --bind 0.0.0.0:8000 app:app --daemon  # Ensure this points to the correct Flask entry point

      # Set up Nginx
      - name: Set up Nginx configuration
        run: |
          # Ensure the directory exists
          sudo mkdir -p /etc/nginx/conf.d

          # Create the Nginx config file
          echo "
          server {
              listen 80;
              server_name your_domain_or_ip;  # Replace with your actual domain or public IP

              location / {
                  proxy_pass http://127.0.0.1:8000;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
          }
          " | sudo tee /etc/nginx/conf.d/swagger_server.conf

          # Test Nginx configuration
          sudo nginx -t

          # Start Nginx if it's not running
          sudo systemctl start nginx

          # Reload Nginx to apply the new configuration
          sudo systemctl reload nginx

          # Enable Nginx to start on boot
          sudo systemctl enable nginx

      # Update with your actual EC2 IP or domain
      - name: Check application health
        run: |
          curl -s http://127.0.0.1:8000/health || echo "Application health check failed"
          
          # Replace <your-ec2-ip> with your actual EC2 IP or domain
          curl -s http://54.161.43.43:8000 || echo "Public IP health check failed"
