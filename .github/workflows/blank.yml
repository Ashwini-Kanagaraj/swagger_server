name: Deploy Swagger-documented Python Application

on:
  push:
    branches:
      - main  # Trigger deployment on push to the 'main' branch

jobs:
  deploy:
    runs-on: ubuntu-latest  # Change this to the appropriate environment if needed
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Copy Nginx configuration and ensure directory exists
      run: |
        # Ensure the Nginx config directory exists
        sudo mkdir -p /etc/nginx/conf.d
        
        # Create the Nginx config file
        echo "
        server {
            listen 80;
            server_name your_domain_or_ip;  # Replace with your actual domain or public IP

            location / {
                proxy_pass http://127.0.0.1:8000;
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
            }
        }
        " | sudo tee /etc/nginx/conf.d/swagger_server.conf
        
        # Test Nginx configuration
        sudo nginx -t
        
        # Start Nginx if it's not running
        sudo systemctl start nginx
        
        # Reload Nginx to apply the new configuration
        sudo systemctl reload nginx
        
        # Enable Nginx to start on boot
        sudo systemctl enable nginx
    
    - name: Start Gunicorn
      run: |
        # Ensure correct working directory
        cd /path/to/your/app  # Replace with the actual directory where your app is located
        
        # Create a Gunicorn service
        sudo tee /etc/systemd/system/gunicorn.service <<EOF
        [Unit]
        Description=gunicorn daemon for Flask app
        After=network.target

        [Service]
        User=ec2-user
        Group=ec2-user
        WorkingDirectory=/path/to/your/app  # Replace with actual path
        ExecStart=/usr/local/bin/gunicorn --workers 3 --bind 0.0.0.0:8000 app:app

        [Install]
        WantedBy=multi-user.target
        EOF
        
        # Reload systemd to apply Gunicorn service changes
        sudo systemctl daemon-reload
        
        # Start Gunicorn service
        sudo systemctl start gunicorn
        
        # Enable Gunicorn to start on boot
        sudo systemctl enable gunicorn
    
    - name: Health Check for Gunicorn
      run: |
        # Health check using curl
        curl -s http://127.0.0.1:8000/health || echo "Health check failed"
    
    - name: Health Check for Public IP
      run: |
        # Replace <your-ec2-ip> with your actual EC2 IP or domain
        curl -s http://<your-ec2-ip>:8000 || echo "Public IP health check failed"
